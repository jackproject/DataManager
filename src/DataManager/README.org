

* communication

嘉明，现在完成的代码，我已经上传到服务器了。部署方式及现在的进度大致如下：

** 部署
   CLOCK: [2016-04-17 周日 17:40]--[2016-04-17 周日 18:11] =>  0:31
1. 更新MySQL库 (见文件末尾)
2. 插入数据
3. 访问 index.html

** 还需完成的工作
1. 根据不同类型的 item 筛选条件来筛选数据
2. 解析 excel 文件，根据 item 以及 别名 识别并插入数据库中
3. 上传 excel 文件到服务器   

** 总结
这次使用了新的库，不太熟练，遇到问题需要不断地测试，熟悉新的框架，难度增大了
同时，在已经有代码量，再增加大量代码，难度也增加了
因此，从而造成进度的延误了。

* learn
  CLOCK: [2016-04-15 周五 15:20]--[2016-04-15 周五 15:46] =>  0:26

** hsql 中多表查询形式
   SCHEDULED: <2016-04-19 周二>
   CLOCK: [2016-04-19 周二 21:11]--[2016-04-19 周二 21:15] =>  0:04
   CLOCK: [2016-04-19 周二 21:10]--[2016-04-19 周二 21:11] =>  0:01

** hsql 中转换字符串 到特定的类型 的数据
   CLOCK: [2016-04-17 周日 19:43]--[2016-04-17 周日 19:55] =>  0:12
   CLOCK: [2016-04-17 周日 18:15]--[2016-04-17 周日 18:18] =>  0:03


【注意】 case 必须是不能封装的数据类型


StringBuffer sb;


String hsql = new String(sb);


---------

cast转换类型后比较 


CAST (expression AS data_type)

SELECT CAST('12' AS int)



---------

CAST、CONVERT都可以执行数据类型转换。在大部分情况下，两者执行同样的功能，不同的是CONVERT还提供一些特别的日期格式转换，而CAST没有这个功能。
http://www.cnblogs.com/kissdodog/p/3165944.html


---------
SELECT {fn CONCAT(CONVERT(user_id,CHAR),USER_NAME)} AS str FROM t_sys_user

* nextstep
** 实现通过传递刷选编号查询数据
   SCHEDULED: <2016-04-15 周五>
   CLOCK: [2016-04-19 周二 20:01]--[2016-04-19 周二 20:28] =>  0:27
   CLOCK: [2016-04-19 周二 19:45]--[2016-04-19 周二 20:00] =>  0:15
   CLOCK: [2016-04-18 周一 20:04]--[2016-04-18 周一 20:05] =>  0:01
   CLOCK: [2016-04-17 周日 20:02]--[2016-04-17 周日 20:49] =>  0:47
   CLOCK: [2016-04-15 周五 21:30]--[2016-04-15 周五 22:02] =>  0:32


【把所有 item 相同的都拼接在一起】






select recorddata0_.item_id as item_id1_0_, recorddata0_.data_id as data_id2_0_, recorddata0_.content as content3_0_ from t_data recorddata0_ where 
recorddata0_.item_id=1 and cast(content as decimal)>cast('1' as decimal) or 
recorddata0_.item_id=1 and cast(content as decimal)<cast('100' as decimal) or 
recorddata0_.item_id=7 and cast(content as date)>cast('2016-04-19' as date) 


【用这种算法来写，没错】
select recorddata0_.item_id as item_id1_0_, recorddata0_.data_id as data_id2_0_, recorddata0_.content as content3_0_ from t_data recorddata0_ where (recorddata0_.item_id<>1 or cast(content as decimal)>cast('1' as decimal)) and (recorddata0_.item_id<>1 or cast(content as decimal)<cast('100' as decimal)) and (recorddata0_.item_id<>7 or cast(content as date)>cast('2016-04-19' as date))

---------

like 




selet from t_data where (item_id=1 and content>1) or (item_id=1 and content<100)

要通过 HSQL 的字段类型来转变





select * from t_data where (item_id=1 and CAST(content AS FLOAT)>CAST('1' AS FLOAT)) or (item_id=1 and CAST(content AS FLOAT)<CAST('100' AS FLOAT));

select * from t_data where (item_id=1 and CAST(content AS FLOAT)>CAST('1' AS FLOAT));


select * from t_data where CAST(content AS int)>CAST('1' AS int);


select * from t_data where CAST(content AS int)=1;



mysql 中的值必须这样

DECIMAL

select * from t_data where (item_id=1 and CAST(content AS DECIMAL)>CAST('1' AS DECIMAL));

select * from t_data where (item_id=1 and CAST(content AS DECIMAL)>CAST('1' AS DECIMAL)) or (item_id=1 and CAST(content AS DECIMAL)<CAST('100' AS DECIMAL));



---------
herbnate 中 case 必须是 int ， float 这些基础数据类型

以前都是连接的ORACLE，MYSQL数据库，写程序一直也没出现过什么问题，就在近期用SQL SERVER出了点问题。

用hibernate操作sqlserver数据库，数据库表中有个日期字段是字符型，当查询一定时间范围内的数据时需要转换日期，这里需要注意了hibernate CAST函数支持转换类型在SQL SERVER中不一定行。
如：and cast(a.enterdate as date) >= cast('2009-01-01' as date) 


---------

String formatbgString = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(begintime);
String formatendString = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(begintime);

"and t.begintime > to_date('" + formatbgString + "', 'yyyy-MM-dd HH24:mi:ss') and t.endtime < to_date('" + formatendString + "', 'yyyy-MM-dd HH24:mi:ss')" 




** 验证项体现在输入时，只能选择这些项

比如说业务类型是系统项，那么它的系统选项是：估算，概算，预算 ，决算


** 实现筛选服务相关对象
   CLOCK: [2016-04-15 周五 17:29]--[2016-04-15 周五 17:58] =>  0:29
   CLOCK: [2016-04-15 周五 16:48]--[2016-04-15 周五 17:23] =>  0:35
** 实现刷选接口
** 刷选功能
   CLOCK: [2016-04-15 周五 14:47]--[2016-04-15 周五 15:15] =>  0:28
   CLOCK: [2016-04-15 周五 14:16]--[2016-04-15 周五 14:42] =>  0:26
** 用户刷选时，能够根据item项目进行调整
** 用户登录的界面
** 文件上传
** excel解析

1. 需要考虑字段类型，并解析

** CRUD 查询数据
   CLOCK: [2016-04-13 周三 20:45]--[2016-04-13 周三 21:08] =>  0:23
   CLOCK: [2016-04-13 周三 19:42]--[2016-04-13 周三 20:28] =>  0:46
   CLOCK: [2016-04-13 周三 18:57]--[2016-04-13 周三 19:28] =>  0:31

angular Request Method:DELETE Status Code:415 Unsupported Media Type

改成post形式
		  <th>操作</th>
** excel 解析
1. 处理不同类型的解析


** 解析excel，以及整合项目
   SCHEDULED: <2016-04-10 周日>
   CLOCK: [2016-04-10 周日 22:03]--[2016-04-10 周日 22:34] =>  0:31


Description	Resource	Path	Location	Type
Unbound classpath container: 'JRE System Library [JavaSE-1.7]' in project 'DataManager'	DataManager		Build path	Build Path Problem

sted exception is java.lang.UnsupportedClassVersionError: com/soho/service/ItemService : Unsupported major.minor version 51.0


** 实现与 angularjs 的集成
   CLOCK: [2016-04-08 周五 20:41]--[2016-04-08 周五 21:08] =>  0:27
** Item管理页面
   CLOCK: [2016-04-08 周五 21:35]--[2016-04-08 周五 21:41] =>  0:06
   CLOCK: [2016-04-08 周五 19:55]--[2016-04-08 周五 20:21] =>  0:26

** DONE 搭建 bootstrap 与 angularjs 的基础框架
   SCHEDULED: <2016-04-08 周五>
   - State "DONE"       from ""           [2016-04-08 周五 19:55]
   CLOCK: [2016-04-08 周五 19:11]--[2016-04-08 周五 19:37] =>  0:26

- bootstrap 中文
  http://www.bootcss.com/



** 实现输入文件

http://v3.bootcss.com/css/#forms

表单
基本实例

** 查看web需求
   SCHEDULED: <2016-04-04 周一>
   CLOCK: [2016-04-04 周一 21:39]--[2016-04-04 周一 21:44] =>  0:05
** 更新到服务器
   SCHEDULED: <2016-03-28 周一>
   CLOCK: [2016-03-29 周二 20:16]--[2016-03-29 周二 20:26] =>  0:10
   CLOCK: [2016-03-29 周二 19:37]--[2016-03-29 周二 20:02] =>  0:25
** 插入和删除数据的批量更新
** 字段的排序功能
** 修改 MyEclipse 的注释风格
** 处理数据记录模型中的 type 字段
   SCHEDULED: <2016-03-16 周三>
** 字段名唯一问题
   CLOCK: [2016-03-19 周六 10:40]--[2016-03-19 周六 11:17] =>  0:37
1. 设置数据库字段唯一？
2. 设定 数据记录 唯一

** 整理使用手册
1. 截图等

** 优化界面
   CLOCK: [2016-03-17 周四 20:14]--[2016-03-17 周四 20:53] =>  0:39
   CLOCK: [2016-03-16 周三 21:38]--[2016-03-16 周三 22:41] =>  1:03
1. 发布 ExtJS release 版本
2. 改成修改那些改成中文版的提示



ycompressor


java -jar "D:\Program Files (x86)\SenchaSDKTools-2.0.0-beta3\compat\jsbuilder\ycompressor\ycompressor.jar" --type js --charset UTF-8 all-classes.js -o app-all.js

* need

1. 上传excel能否一次选择多个文件？
   一次一个就行

2. 查询条件中 "广东,广西" ，认为采取与“字段”下拉框的处理方式比较好：
   比如： 1. 字段 2. 比较条件(大于、匹配、小于) 3. 值
   改成并且的关系

3. 能够对数据表进行增删改查的功能。 这一项需要有web界面吗？
   不需要，为以后预留


* code & tech
** datamanage php code


执行 sql 传入参数格式：

        $values_arr = array();

        $values_arr[0] = ["item test", 1];


---------

        $arrlength = count($rec);

        for ($x = 0; $x < $arrlength; $x++) {
            $t = $rec[$x];
            $len = count($t);

            for ($i = 0; $i < $len; $i++) {
                echo $t[$i] . ", ";
            }

            echo "<br>";
        }

---------

select max(item_id) as maxid from t_item


---------

** mysql

alter database datamanager character set utf8;

alter database datamanager character set utf8 COLLATE utf8_chinese_ci;;


create database datamanager character set utf8 COLLATE utf8_chinese_ci;

---------
不能执行这条语句： $this->conn = new mysqli(self::host, self::user, self::password, self::db, self::port);

【解决办法】

设置 php.ini 中的  mysqli.dll 这一项

extension=php_mysqli.dll




(+ 760 710)

** extjs

sencha create jsb -a http://localhost:8080/DataManager/temp.jsp -p app.jsb3

sencha build -p app.jsb3 -d .


java -jar "d:/Program Files (x86)/SenchaSDKTools-2.0.0-beta3/compat/jsbuilder/ycompressor/ycompressor.jar" --type js --charset utf-8 -v all-classes.js > app-all.js 


** maven

maven 编码GBK的不可映射字符


* sql 

drop database datamanager;

create database datamanager character set utf8 COLLATE utf8_general_ci;

use datamanager


select * from t_item;

delete from t_data;

select * from t_data;


insert into t_item(name, type, order_num) values('字段1', 1, 1);
insert into t_item(name, type, order_num) values('字段2', 1, 1);
insert into t_item(name, type, order_num) values('备注', 1, 1);



insert into t_data(data_id, item_id, content) values(1, 1, '内容1');
insert into t_data(data_id, item_id, content) values(1, 2, '内容2');



insert into t_othername(item_id, name) values(1, '别名1');
insert into t_othername(item_id, name) values(1, '别名2');



insert into t_validate(item_id, validate_item) values(1, '验证1');
insert into t_validate(item_id, validate_item) values(1, '验证2');


---------

INSERT INTO `t_item` (`item_id`, `name`, `type`, `order_num`, `maxlength`) VALUES
(1, '编号', 0, 1, 1000),
(2, '名称', 0, 0, 100),
(3, '字段名', 0, 100, 100),
(5, '字段2', 1, 2, 10),
(6, '备注', 1, 90, 1000),
(7, '日期', 1, 90, 50);


INSERT INTO `t_othername` (`othername_id`, `item_id`, `name`) VALUES
(7, 2, ''),
(10, 1, '别名1'),
(11, 1, '别名1'),
(12, 1, '别名2'),
(15, 3, ''),
(16, 6, ''),
(17, 5, '');

INSERT INTO `t_validate` (`validate_id`, `item_id`, `validate_item`) VALUES
(7, 2, ''),
(10, 1, '验证1'),
(11, 1, '验证1'),
(12, 1, '验证2'),
(15, 3, ''),
(16, 6, ''),
(17, 5, '');



INSERT INTO `t_user` (`username`, `password`) VALUES
('admin', '123456'),
('user', '123456'),
('1', '1');


INSERT INTO `t_pick` (`pick_id`, `pick_name`) VALUES
(1, '筛选1'),
(2, '筛选2');


INSERT INTO `t_pick_item` (`pick_item_id`, `pick_id`, `item_id`, `choice`, `pick_value`) VALUES
(1, 1, '1', 0, '1'),
(2, 1, '1', 2, '100');


INSERT INTO `t_data` (`data_id`, `item_id`, `content`) VALUES
(1, 1, '1'),
(1, 2, '1'),
(1, 3, '1'),
(2, 1, '2'),
(2, 2, '2'),
(2, 3, '2');


update t_item set type=1 where item_id=1;




INSERT INTO `t_data` (`data_id`, `item_id`, `content`) VALUES
(1, 7, '2016-04-10'),
(2, 7, '2016-04-20');


select * from t_pick_item;


update t_pick_item set pick_value=100 where pick_item_id=2;



INSERT INTO `t_pick_item` (`pick_id`, `item_id`, `choice`, `pick_value`) VALUES
(1, 7, 0, '2016-04-19');



